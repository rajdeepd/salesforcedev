{"0": {
    "doc": "Salesforce Developer Tool Details",
    "title": "Salesforce Setup",
    "content": "The first one is the Salesforce Setup. Go to the Salesforce setup and search for Apex Trigger or Apex Class, and you can click on any of the Apex Class that you have written before, or you can create a new Apex Class. In this location itself, Salesforce gives you a code editor where you can write your Apex code. Using Salesforce setup, you can write Apex Class, Apex Trigger or Visual Force pages, but it does not support Lightning Components. If you want to write an aura component, you can not use Salesforce setup to write the code. It is not recommended to use Setup to write code as there are better tools available . ",
    "url": "/salesforcedev/3-10-developer-tools.html#salesforce-setup",
    
    "relUrl": "/3-10-developer-tools.html#salesforce-setup"
  },"1": {
    "doc": "Salesforce Developer Tool Details",
    "title": "Developer Console",
    "content": "Apart from Salesforce setup, Salesforce also provides another tool which is called Developer Console. Go to your setup gear icon and from there, you will see an option called Developer Console as shown below . On loading the developer console in a new window you get the following menu. Once you click on this option, it’s going to open a new window or a new browser tab where you can write your code. The Developer Console supports Apex Classes, Apex Triggers, Visual Force Pages and Aura Components or Lightning web components. It has many features like, you can view your logs from the developer Console. You can also run test classes from developer Console, or you can also write anonymous code or to test your functionality. ",
    "url": "/salesforcedev/3-10-developer-tools.html#developer-console",
    
    "relUrl": "/3-10-developer-tools.html#developer-console"
  },"2": {
    "doc": "Salesforce Developer Tool Details",
    "title": "VS Code",
    "content": "Let us move on and talk about one of the best code editor available for Salesforce, and that is VS Code. Reference: . | Salesforce Developer tool - vscode home page | VSCode Desktop Install | VS Code Marketplace: Salesforce Extension Pack | . Salesforce recommends that you use VS Code to write your Apex code or to write your Lightning Components, and it’s much easier to setup, and it supports all kind of development work in Salesforce. You can write your Apex Classes, your Visual Force pages, Apex Triggers, Aura Components or Lightning Web Components. And it’s much easier to deploy your changes back to your Salesforce Org using VS Code, and the best part about VS Code is, it’s an open source tool, . Salesforce has its own extension pack for VS Code that can help you write your code much faster. We will be using combination Salesforce Setup, the Developer Console and the VS Code editor for our development purpose or to write our Apex code, and you’ll also get a feel of how you can use these different tools to do your development work. ",
    "url": "/salesforcedev/3-10-developer-tools.html#vs-code",
    
    "relUrl": "/3-10-developer-tools.html#vs-code"
  },"3": {
    "doc": "Salesforce Developer Tool Details",
    "title": "Salesforce Developer Tool Details",
    "content": "There are multiple code editors that Salesforce supports that help you write code, that is Lightning Components or back-end code like Apex. Apart from these code editors, Salesforce also has some tools available on the Salesforce platform itself where you can write your Apex code. Let’s talk about all these tools in this section . ",
    "url": "/salesforcedev/3-10-developer-tools.html",
    
    "relUrl": "/3-10-developer-tools.html"
  },"4": {
    "doc": "Developer Edition Org",
    "title": "Creating your own domain",
    "content": "Under setup menu, search for my domain and click on this my domain setting. Now, enabling my domain is also essential if you want to build the lightning components on Salesforce platform. Fig.- Fig.- Fig.- In the input box try for the different domain name that you may want to use for your Developer Edition Org, then click on check availability. If your domain name is available, then Salesforce will tell you about it, and then, this register domain button will be enabled. Salesforce takes some time to enable my domain in the Developer Edition Org. It can take anywhere between five to ten minutes, Salesforce sends an e-mail to you when the my domain is ready to use or else you can also keep on refreshing this browser tab. When my domain name is ready let us click on Login button . The login is successful. Now, I can deploy this my domain to all my Developer Edition Org’s users. So, click on ‘deploy to all the users’, and that’s it. You have enabled my domain in your Developer Edition Org. Notice the URL change for your Developer Edition Org, you no longer see that ap17 here. What you see is your My domain name, which was sfa-dev-training, and then Salesforce also adds keywords like dev-ed, because this is a Developer Edition Org. Fig.- Fig.- So from now on, if you want to login inside your Developer Edition Org, along with the login.salesforce.com, you can also directly go to your My domain name. Changes in Developer Edition . Now, let’s also change few more things in our Developer Edition Org. And, this is only recommended for this Developer Edition Org, never do these steps in your Production Orgs or in sandboxes. The first one is about password policies. We don’t want my password to expire, so I click on never expires here and click on save. Let us also go to session setting, and here you can change the time out value From 2 hours to 24 hours. So, even if you leave the Salesforce Org without doing any work for upto 24 hours, you will not get locked out. And these are helpful settings in the Developer Environment, but you don’t want to do these in your Sandboxes and in your Productions. So, make sure you don’t play around with these settings in your productions. ",
    "url": "/salesforcedev/docs/3-9-create-salesforce-developer-org.html#creating-your-own-domain",
    
    "relUrl": "/docs/3-9-create-salesforce-developer-org.html#creating-your-own-domain"
  },"5": {
    "doc": "Developer Edition Org",
    "title": "Developer Edition Org",
    "content": "Let us sign up for a new Developer Edition Org. Go to https://developer.salesforce.com/signup And fill the form. Fig.- Create a new account Make sure the user name is in the email format, if the user name has been used before it will prompt you. Fig.- Verify your account You will get an email to verify your account and change the password . Fig.- Change Password Fig.- Home page once login is complete ",
    "url": "/salesforcedev/docs/3-9-create-salesforce-developer-org.html",
    
    "relUrl": "/docs/3-9-create-salesforce-developer-org.html"
  },"6": {
    "doc": "About",
    "title": "About",
    "content": "This is a website to share information about Salesforce and other web related technologies. ",
    "url": "/salesforcedev/about/",
    
    "relUrl": "/about/"
  },"7": {
    "doc": "Course Overview",
    "title": "Course Overview",
    "content": "Resources . Apex Development Guide . Aura Component Library . Lightning Design Systems/SLDS . SFDX Guide . MDN Javascript Docs . Learn JS from Scratch . Learn HTML from Scratch . Github: Apex-Development-Course . ",
    "url": "/salesforcedev/docs/section1-resources.html",
    
    "relUrl": "/docs/section1-resources.html"
  },"8": {
    "doc": "Web Application Fundamdentals",
    "title": "Web Application Architecture",
    "content": "It is important that you understand how a Web application works before you start building one. A Web application is a combination of many small programs, and all these programs work together to serve a purpose. At the very least, a Web application has a front end, a back end, and a database to store the data. ",
    "url": "/salesforcedev/docs/section2-4-web-application-architecture.html#web-application-architecture",
    
    "relUrl": "/docs/section2-4-web-application-architecture.html#web-application-architecture"
  },"9": {
    "doc": "Web Application Fundamdentals",
    "title": "Illustration",
    "content": "So, here you are, trying to view your favorite video on YouTube or if you are a technical geek like me, then maybe a video on Udemy. So, you opened up your browser and clicked on a video. Now behind the scene, it will send a request to the YouTube application server and it will send your identity like this user is requesting for this particular video. Your application server is going to process this request. It’s going to check your identity if you are a genuine user or not, or if you have a subscription or not. And, then it’s going to request for the data from the database server. So, the database server will have the video files that you may want to view. This database server is going to return the response to your application server back or maybe a link to the video file where the video file is stored, and then your application server is going to send back the response to your browser that, please play this video file from this particular location. In general, when a user interacts with the application, this layer is called front end. So, this is the application UI that a user can see and your application server and database server are . called back end, because a user cannot see these servers and how the request is processing there. And, if you remove any of the element from this illustration, so, let’s say if I remove my application server, your application will stop working because there is no server to process your request which can identify which video you are requesting and where is it stored. And, if you remove the database server, then your video file will never be stored and you can never view it. And, let’s say if you remove the front end, then the user will not have any place to interact with your application. So, all these three elements are essential for an application to work. So, I hope this clears your mind about what is a front end and what is a back end. Now, let’s try to understand it with the help of an example. So, here I am on the airbnb website, . and this is how it looks when a user type in “airbnb.co.in” in their browser. So, the UI has multiple elements which a user can interact with. Like, I can search for the places to stay, I can search for some of the experiences that I want to explore, maybe I want to do a hitchhiking, then I can search for those experiences here. I can scroll down and check for all the other services that airbnb provides. So, this is a front end where a user can interact with the application. Now let’s try to search for some places to stay in Hyderabad. So, I’m going to stay from 16th of May to 17th of May, and let’s say we are two adults. Now, let’s click on this search button. So, as soon as you click on the search button, the request is sent to the airbnb application server and the airbnb application server will process your request. The server will know that you are looking for some places in Hyderabad. Now, this application server is going to make a request to the airbnb database server and it’s going to ask about all the places to stay in Hyderabad. The database server will respond back with the data. Your application server is going to process this data and it’s going to pass this data in a form that your front end can understand or your browser can understand. Then, it’s going to return this process response to the browser and here, . ",
    "url": "/salesforcedev/docs/section2-4-web-application-architecture.html#illustration",
    
    "relUrl": "/docs/section2-4-web-application-architecture.html#illustration"
  },"10": {
    "doc": "Web Application Fundamdentals",
    "title": "Kitchen Analogy",
    "content": "So, we can say a Web application is like a restaurant where you have a seating area from where a person can read the menu and order for a food item. This order will be sent to the kitchen, where the order will be prepared. To prepare the order, the chef will need some ingredients which will be stored in a larder and a chef can pick some ingredients based on the order. Now, again, here we can say the seating area is the client site or a front end from where the user can interact with your application, or in this case, the user can place an order. The kitchen is back end or our application server where the request will be processed or the order will be prepared. And larder is our database where you will keep your ingredients or the user data. So, this is a classic example to explain how a Web application works and I hope now you understand how these different elements interact with each other to serve a single purpose. In a Web application, a front end is always designed in such a way that it can attract the target audience or the users. ",
    "url": "/salesforcedev/docs/section2-4-web-application-architecture.html#kitchen-analogy",
    
    "relUrl": "/docs/section2-4-web-application-architecture.html#kitchen-analogy"
  },"11": {
    "doc": "Web Application Fundamdentals",
    "title": "Front End vs Back end",
    "content": ". So, this is how a front end looks, where you see the natural beauty and a happy father and his son but, if you want to work on the back end, then this is how it looks. So, sometimes the back end can be messy and it doesn’t look as good as your front end, just wanted to share this with you guys. ",
    "url": "/salesforcedev/docs/section2-4-web-application-architecture.html#front-end-vs-back-end",
    
    "relUrl": "/docs/section2-4-web-application-architecture.html#front-end-vs-back-end"
  },"12": {
    "doc": "Web Application Fundamdentals",
    "title": "Web Application Fundamdentals",
    "content": " ",
    "url": "/salesforcedev/docs/section2-4-web-application-architecture.html",
    
    "relUrl": "/docs/section2-4-web-application-architecture.html"
  },"13": {
    "doc": "Web Technologies Overview",
    "title": "Front End",
    "content": "For front end, we use HTML, the HTML is used to create the UI markup. That means, an HTML markup decides how your UI should look, which button should go where, and which section should go where, where you need to display your navigation bar, where you need to put your images, and all these things are decided by the HTML. For client side computation or for front end logic, . we use JavaScript, so JavaScript gives your HTML pages some dynamic behavior. So, this means, if I click on a button, I can use my JavaScript to make some things happen. So, let’s say on a click of a button, I want to show a pop up, then JavaScript can be used there. Then we use CSS, the CSS is used to give your HTML markup, some style.So, if you only use HTML without CSS, then your UI will look like this. But if you see CSS, then you can improve your user experience by creating some nice UI like this. So, these are the core technologies that are used to design and build your front end. Apart from these core technologies, there are a lot of frameworks out there in the market that makeyour job easier to build your front end. One of such framework is React, which is a very popular framework to build your front end. React was used to build the Facebook front end and later Facebook open sourced the React framework and since then, this is the most popular front end framework out there in the market. Similar to React, we have Angular from Google, which also kind of gives you the same flexibility to design and build your front end. We also have Vue.js, which is one more framework to build and design your front end, and the list goes on. There are tons and tons of front end frameworks out there in the market, each with their own features and capabilities. ",
    "url": "/salesforcedev/docs/section2-5-web-technologies.html#front-end",
    
    "relUrl": "/docs/section2-5-web-technologies.html#front-end"
  },"14": {
    "doc": "Web Technologies Overview",
    "title": "BackEnd",
    "content": "Now let’s talk about Back end. There are multiple technologies available to build the backend and they have evolved into various frameworks. To build your back end, you can use Java, which is again, a widely popular language and it’s been there since ages, and it’s so much mature that you can do almost everything with Java. Then we have Node.js which is based on JavaScript. So, if you know JavaScript, then you can build your front end as well and your back end as well. We also have Go language which is getting popular with each day and this has its own unique features and you can use Go language to build your back end as well. We also have PHP and it’s also a mature framework or mature language, and it’s been there since ages. Most of the blogs that you see out there, they are based on WordPress, which uses PHP as their server side language. Then we have Python. So, Python can also be used to design your back end API’s or to design your back end logic. We have Ruby on Rails as well.And again, here as well,the list goes on.There are so many languages out there and you can choose any one of them. ",
    "url": "/salesforcedev/docs/section2-5-web-technologies.html#backend",
    
    "relUrl": "/docs/section2-5-web-technologies.html#backend"
  },"15": {
    "doc": "Web Technologies Overview",
    "title": "Database",
    "content": "Now let’s talk about our database technologies, the database technologiescan be of two types, the SQL database or NoSQL database. The SQL database stores your data in a tabular format where you can have relationships with multiple tables as well.Where NoSQL database stores your datain Json format. Now,MySQL here is a SQL databse and is widely popular.It’s open source as well,so you can start using it in your projects.Similar to MySQL, we have PostgreSQL, which is also a SQL database and this is alsoan open source database. Then we have Oracle, which is again a widely popular database and is being used by most of the bigorganizations because of its capability to handle large data. We also have SQL Server from Microsoft, which is a competition to Oracle.Now, let’s talk about some of the NoSQL databases. MongoDB stores your data in json format rather than in tabular format,and this one also is a popular database.Then we have . Redis, which is a cache based database. It stores your data in a cache,so the input output operation in a Redis database is much faster than any of the other databases but it comes with its own cost.So, there are tons of database technologies out there and you can pick any of these technologies. Now, in this video, we have only talked about the generic Web technologies, which can be used tobuild any Web application. In the next video, we will be discussing about the Salesforce Web Technologies, like if youwant to create your front end on Salesforce platform, then which technologies do you need? How you can create your back end in Salesforce? . ",
    "url": "/salesforcedev/docs/section2-5-web-technologies.html#database",
    
    "relUrl": "/docs/section2-5-web-technologies.html#database"
  },"16": {
    "doc": "Web Technologies Overview",
    "title": "Web Technologies Overview",
    "content": "Let’s talk about the web technologies that are used to develop each of these Web application layers. ",
    "url": "/salesforcedev/docs/section2-5-web-technologies.html",
    
    "relUrl": "/docs/section2-5-web-technologies.html"
  },"17": {
    "doc": "Salesforce Technologies",
    "title": "Salesforce Backend",
    "content": "Let’s talk about the Salesforce back end. Salesforce uses relational database as its database, Salesforce uses Oracle database as the backend along with Big Data stack, NoSQL databases and now real time data using data lake called Genie. But as a Salesforce user, you will never be directly interacting with the relational database, ratheryou will be interacting with the Salesforce Objects. You will be creating your objects, which in database terms, are tables where you will be storing your records or rows. Salesforce back end language is Apex, which is very similar to the Java language. You can use the Apex to read the data from your Salesforce objects or to update, delete or create the data in your Salesforce objects. Apart from the Apex language, Salesforce has some declarative tools as well, which can also directly interact with your objects or your Salesforce database . These tools are Workflow Rules, Process builder, Visual Flows and Approval Processes. We will be talking about these declarative tools But for now, just know that apart from Apex, there are some declarative tools that can also read and update your Salesforce data. Let us see, how a Salesforce object stores your data. You can say that a Salesforce object is a database table (or a virtual table) where you can store your data. In this example, we have a user object which can store the user data. We have a table which can store the first name of users the last name of the user and the email of the user. And we can see that it has two records,one for Manish Choudhari and the second one for the Harry Potter. Now, this first name, last name and email, . These are called Fields. So, the first name is the field 1 in user object. Then we have another field called Last Name, and then we have another field called e-mail. In database terms, you can also call these columns. And, the Manish Choudhari and Harry Potter are the records. So, this table or this object has two records. In database terms, you can also call these records as row or the table row. So, just to reiterate, a Salesforce object is just a schema to store your data and it stores your data in tabular format. ",
    "url": "/salesforcedev/docs/section2-6-salesforce-technologies.html#salesforce-backend",
    
    "relUrl": "/docs/section2-6-salesforce-technologies.html#salesforce-backend"
  },"18": {
    "doc": "Salesforce Technologies",
    "title": "Salesforce Technologies",
    "content": "We will give an overview of Salesforce Web Technologies now. Salesforce currently supports two types of user experiences. The first one is Salesforce Classic. The Salesforce Classic was the only user experience in Salesforce before 2014 and as you can see from this image here, this was built on older technology stack prevalent at that time. After 2014, Salesforce has started supporting a new type of user experience called Single page view, which is called Salesforce Lightning. Now, this is a modern UI. This not only looks better, it also helps you increase your productivity. From one page itself,you will have tons of options to do your work. Let’s say you want to update your opportunity stage, you have Lightning path right there. I’m talking about that green line, so you can click on one of the elements and , your opportunity stage is updated. You can see all your related records on the same page on the right side bar. This definitely helps you increase your productivity, Lightning is much faster than the Salesforce Classic. Now, let’s talk about the technologies that you can use to build any of these UI. If you want to build Salesforce Classic UI, then you have to use the Visualforce pages. Visualforce is a Salesforce proprietary language that you can use to build your UI pages or UI components. If you want to build the Salesforce Lightning UI, then you have two technologies here. The first framework is the Aura Components framework and the second is Lightning Web Component framework. The Aura Component framework was introduced in 2014 and it’s more mature than compared to the Lightning Web Components framework which were introduced in the December 2018. NOTE: Aura Components are units of an application that are both self-contained and reusable. They serve as modular pieces of the user interface and can range in size from a single line of text to an entire application. The framework comes with a set of pre-built components, including the base Lightning components that have Lightning Design System styling and can be found in the lightning namespace. By assembling and configuring components, new components can be formed within an app, and they are rendered to produce HTML DOM elements in the browser. Components can contain other components, as well as HTML, CSS, JavaScript, or any other web-enabled code. This allows for the creation of apps with complex user interfaces. The implementation details of a component are encapsulated, enabling the consumer of a component to focus on building their app while the component author can innovate and make changes without affecting consumers. Components can be configured by setting the named attributes that they expose in their definition, and they interact with their environment by listening to or publishing events. NOTE: The Lightning Component framework is a user interface (UI) framework designed for creating single-page applications for both mobile and desktop devices. Since Spring ‘19 (API version 45.0), developers have been able to create Lightning components using two programming models: the original Aura Components model, and the newer Lightning Web Components model. Lightning Web Components are custom HTML elements that are built using HTML and modern JavaScript. It’s possible for both Lightning Web Components and Aura components to exist and work together on a single page. Both Lightning Web Components and Aura Components can be configured to function within the Lightning App Builder and Experience Builder. The end-users and administrators don’t need to know which programming model was used to develop the components, as they’ll simply be viewed as Lightning components to them. Both of these frameworks allow you to achieve the similar functionality or to build similar components but they have different tech stack. Lightning Web Component framework is much faster than the Aura component because it is based on the latest web standards, where the Aura component framework was a complete Salesforce proprietary frameworkand each and every feature of this framework was built within the framework itself. The Lightning Web Component framework relies on the latest web components framework and that is the reason the Lightning Web Components are much faster than the Aura component framework. For more details refer to the following links: . Lwc vs Aura what Architects need to know . Lightning Aura Components Developer Guide . ",
    "url": "/salesforcedev/docs/section2-6-salesforce-technologies.html",
    
    "relUrl": "/docs/section2-6-salesforce-technologies.html"
  },"19": {
    "doc": "Web Technologies",
    "title": "Web Technologies",
    "content": "In this section we will cover the following . | Web Technologies | Salesforce Technologies mapped to web technologies | . ",
    "url": "/salesforcedev/docs/section2-home.html",
    
    "relUrl": "/docs/section2-home.html"
  },"20": {
    "doc": "Salesforce Declarative and Dev Tools",
    "title": "Salesforce Declarative and Dev Tools",
    "content": " ",
    "url": "/salesforcedev/section3-salesforce-tools.html",
    
    "relUrl": "/section3-salesforce-tools.html"
  },"21": {
    "doc": "Apex",
    "title": "Apex",
    "content": "Apex . ",
    "url": "/salesforcedev/docs/assets/images/section4-apex.html",
    
    "relUrl": "/docs/assets/images/section4-apex.html"
  },"22": {
    "doc": "Introducing Apex",
    "title": "Quick Start",
    "content": "Create a new class in Developer Console . | From the File menu, select New Apex Class. | For the class name, enter AccountUtil and then click OK. | . Fig.- New Apex file public class AccountUtil { } . \" Fig.- Screenshot of Dev Console with the new class created ",
    "url": "/salesforcedev/docs/assets/images/section4-introducing-apex.html#quick-start",
    
    "relUrl": "/docs/assets/images/section4-introducing-apex.html#quick-start"
  },"23": {
    "doc": "Introducing Apex",
    "title": "Add a method to the class",
    "content": "Update all accounts description. We create a static method updateAllAccounts() . Static methods, variables, and initialization code have these characteristics. They’re associated with a class, are allowed only in outer classes. They’re initialized only when a class is loaded. They aren’t transmitted as part of the view state for a Visualforce page. Instance methods, member variables, and initialization code have these characteristics. They’re associated with a particular object. They have no definition modifier. They’re created with every object instantiated from the class in which they’re declared. public static void updateAllAccounts() { // Get all accounts Account[] accounts = [SELECT Id, Description FROM Account]; // loop through them and update the Description field for (Account acct : accounts) { acct.Description = 'Updated Account Description'; } // save the change you made update accounts; } . ",
    "url": "/salesforcedev/docs/assets/images/section4-introducing-apex.html#add-a-method-to-the-class",
    
    "relUrl": "/docs/assets/images/section4-introducing-apex.html#add-a-method-to-the-class"
  },"24": {
    "doc": "Introducing Apex",
    "title": "Execture the static method",
    "content": "Let us execute the method from Anonymous window. Test &gt; Open Execute Anonymoud Window . You can see the output as shown below: . ",
    "url": "/salesforcedev/docs/assets/images/section4-introducing-apex.html#execture-the-static-method",
    
    "relUrl": "/docs/assets/images/section4-introducing-apex.html#execture-the-static-method"
  },"25": {
    "doc": "Introducing Apex",
    "title": "Verify Record Update",
    "content": "If you go back to record detail page of any Account you will notice updated Description . Reference Trailhead Apex QuickStart . ",
    "url": "/salesforcedev/docs/assets/images/section4-introducing-apex.html#verify-record-update",
    
    "relUrl": "/docs/assets/images/section4-introducing-apex.html#verify-record-update"
  },"26": {
    "doc": "Introducing Apex",
    "title": "Introducing Apex",
    "content": "Apex is a strongly typed Object Oriented language to execture flows and transactional statements on Salesforce platform servers. For more details on Apex introduction refer to . Apex Intro . ",
    "url": "/salesforcedev/docs/assets/images/section4-introducing-apex.html",
    
    "relUrl": "/docs/assets/images/section4-introducing-apex.html"
  },"27": {
    "doc": "",
    "title": "",
    "content": "--- layout: page title: Declarative tools in Salesforce permalink: parent: Salesforce Declarative and Dev Tools nav_order: 3 --- Apex is not the only technology in Salesforce which can access your data or manipulate it. Apart from Apex, there are multiple declarative tools available in Salesforce which can read your data or manipulate it. These declarative tools are also called the point and click tools because you do not have to write any code to use these. However, you need your problem solving ability to write your logic in these tools. ## Workflow Rule Now, let's have a look at these declarative tools one by one. The first one is Workflow Rule and Workflow Rule has been part of the Salesforce platform for many many years and it's one of the most mature tools available on the Salesforce platform right now. If you go back 10 years, then Workflow Rule was the only available automation tool at that time. These Workflow Rules can have multiple actions, like send an e-mail or sending an outbound message or creating a task or updating the self record where the workflow Rule is executing or the parent record but it doesn't allow the child the record update. That means if your Workflow Rule is executing on a parent object, you can not update the related child record on that parent record. These are the limitation in Workflow Rule. Workflow rule has been deprecated to Flow and Flow Builder. ## Process builder Later, Salesforce introduced one more declarative tool, which is called Process Builder. It supports many types of actions, like all the actions in workflow rule except the outbound message, it cannot send outbound message, but it can send an email. It can create a task or any type of object record for that matter. So, you can create any type of record using Process Builder. It can also update the record, the parent record or the child record So, Process Builder supports all types of record update, but these records should be related to each other. So, either this record that you want to update should be the self record where the process builder is executing, or it should be the parent record, or it can be the child record. The Process Builder also can execute your Apex class. So, you can have your logic in your Apex class and can directly call it from the Process Builder. A Process Builder can have multiple steps unlike Workflow Rule. So, in one single Process Builder, you can have your entire logic using different if-else conditions or using different steps However, the Process Builder does not support deleting of a record. So, if you want to delete a record, the Process Builder is not the right tool for you. If you want to update the unrelated records, this means if you have two different objects, which do not share any kind of relationship and you have a Process Builder on one of the objects, then you can not update the records of the other object from the Process Builder. ## Flowbuilder This is a new tool replacing process builder which we will exoplain below. ## Visual Flow The last and the most powerful declarative tool available in Salesforce is the Visual Flow. Visual Workflow is a feature in Salesforce that allows users to automate business processes by creating flows using the Cloud Flow Designer. Flows can execute logic, interact with the database, call Apex classes, and collect data from users. Autolaunched flows can be launched without user interaction, and Visual Workflow has three different aspects: design, manage, and run. Users can build flows using combinations of elements, connectors, and resources. Visual Workflow is available in several Salesforce editions and can be used for various purposes, such as scripting calls for customer support or generating real-time quotes for a sales organization. It is different from Workflow and has limitations and considerations to keep in mind when designing, managing, and running flows. A Visual Flow can do so much more than what a Workflow Rule or a Process Builder can do. And, it can execute Apex classes, it can execute lightning components as well, you can design your screens using Visual Flow, you can almost write all types of logic in Visual Flow, so, it's very similar to how Apex is written. Fig.- List of flows in setup You can also declare certain methods that you can call from Visual Flow. But, it comes with its own cost. The execution of a Visual Flow is slower than Apex. Fig.- Creating a new flow Fig.- Flow builder So, let's say if you have similar logic in your Visual Flow and in Apex class, then your Apex class will execute faster than the Visual Flow. The debugging of Visual Flow can be challenging sometimes, and it's not that easy to debug the errors in your Visual Flow. Visual Flow is not a pure a declarative tool, but a low code development tool where you don't have to write that much amount of code that you write in your Apex class. Visual Flow is by far the most powerful declarative tool and you can do almost everything in the Visual Flow but still, it cannot match the power of Apex code. For some complex requirements, implementing a Visual Flow can be very challenging compared to writing an Apex code. To summarize, these are the declarative tools available in Salesforce. In this course, our main focus would be to learn Apex and write Apex code. So, we will not be implementing any of these declarative tools. ",
    "url": "/salesforcedev/docs/3-8-decarative-tools-in-salesforce.html",
    
    "relUrl": "/docs/3-8-decarative-tools-in-salesforce.html"
  },"28": {
    "doc": "",
    "title": "",
    "content": "--- layout: page title: Apex Variables permalink: nav_order: 4 parent: Apex --- Apex is a strongly typed language, supports the following variables In Apex programming language, every variable and expression must have a specific data type. The data types in Apex include primitives, sObjects, collections, enums, user-defined classes, and null. Primitives are simple data types like Integer, Double, Long, Date, Datetime, String, ID, or Boolean. sObjects are either generic or specific, such as an Account, Contact, or a custom object. Collections include lists, sets, maps, and enums. User-defined classes and system supplied Apex classes can also be used to create objects. Null is used to assign no value to a variable. Methods in Apex can return values of any data type listed above or return no value and have a type of Void. Apex strictly enforces type checking at compile time. For instance, if an object field of type Integer is assigned a value of type String, the parser generates an error. All compile-time exceptions are returned as specific fault codes, along with the line number and column of the error. Debugging Apex provides more information on this topic. ## Primitive data types Apex uses the same primitive data types as [SOAP API](https://developer.salesforce.com/docs/atlas.en-us.api.meta/api/sforce_api_calls_concepts_core_data_objects.htm), except for higher-precision Decimal type in certain cases. All primitive data types are passed by value. All Apex variables, whether they’re class member variables or method variables, are initialized to null. All the variables need to be initialized before using. ### String Any set of characters surrounded by single quotes. For example, ```java String s = 'This is a string'; ``` There is no upper limit on size of string but is governed by heap size limit. See [Apex Governor Limits](https://developer.salesforce.com/docs/atlas.en-us.apexcode.meta/apexcode/apex_gov_limits.htm) for more details ### Boolean Boolean is `true`, `false` or `null`. ```java Boolean isWinner = true; ``` ### Date Date is a primitive datatype, A value that indicates a particular day. Unlike Datetime values, Date values contain no information about time. Always create date values with a system static method. Some example of Date datatype using `Date.newInstance()` method. ```java Date myDate = Date.newInstance(1960, 2, 17); Date newDate = mydate.addDays(2); ``` Create data from today's date and convert to specific format. ```java DateTime todaysDate = System.today(); String todaysDateStr = todaysDate.format('yyyy-MM-dd'); System.debug(todaysDateStr); ``` ### Integer, Long, Double **Integer** 32 bit number with no decimal **Long** 64 bit number with no deciment **Double** A 64-bit number that includes a decimal point. Doubles have a minimum value of -263 and a maximum value of 263-1. Example ```java Integer i = 0; Long l = 2147483648L; Double pi = 3.14159; ``` ### Object Any data type which is supported by Apex ```java Object object = 100; // Cast the object to an integer. Integer i = (Integer)object; System.assertEquals(100, i); ``` ## sObject An `sObject` represents an object, such as an Account or Contact. For a list of standard objects, see Standard Objects. Each Salesforce record is represented as an sObject before it is inserted into Salesforce. Likewise, when persisted records are retrieved from Salesforce, they’re stored in an sObject variable. Standard and custom object records in Salesforce map to their sObject types in Apex. Here are some common sObject type names in Apex used for standard objects. The example below creates an sObject of type Account with the name Acme and assigns it to the acct variable. ```java Account account = new Account(Name='Acme'); ``` Reference: [Field Types](https://developer.salesforce.com/docs/atlas.en-us.242.0.object_reference.meta/object_reference/field_types.htm) ",
    "url": "/salesforcedev/docs/assets/images/sectio4-apex-variables.html",
    
    "relUrl": "/docs/assets/images/sectio4-apex-variables.html"
  }
}
